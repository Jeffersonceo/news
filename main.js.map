{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/news-api.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","<!--News Headlines header has a burger-style side-nav open button and a settings menu using a material icon-->\n\n<mat-toolbar color=\"primary\">\n  <button mat-button (click)=\"sidenav.open()\"><mat-icon>menu</mat-icon></button>\n  <span>News Headlines</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-button [matMenuTriggerFor]=\"appMenu\">\n    <mat-icon>settings</mat-icon>\n  </button>\n</mat-toolbar>\n\n<!--menu items listed as buttons.-->\n<mat-menu #appMenu=\"matMenu\">\n  <button mat-menu-item>Settings</button>\n  <button mat-menu-item>Help</button>\n</mat-menu>\n\n<!--sidenav component to add side content to a fullscreen app-->\n<mat-sidenav-container class=\"example-container\">\n  <!--\n    A click event will:\n      -list sources using angular ngFor\n      -clicking on a source will activate function searchArticles() & will close sidebar\n      -show an avatar (from assets folder) for the source and the source name using data-binding\n  -->\n  <mat-sidenav #sidenav class=\"example-sidenav\">\n    <mat-list class=\"list-nav\">\n      <mat-list-item\n        class=\"list-item\"\n        *ngFor=\"let source of mSources\"\n        (click)=\"searchArticles(source.id); sidenav.close()\"\n      >\n        <div\n          mat-card-avatar\n          [ngStyle]=\"{\n            'background-image': 'url(../assets/images/' + source.id + '.png)'\n          }\"\n          class=\"example-header-image\"\n        ></div>\n        <span class=\"source-name\"> {{ source.name }}</span>\n      </mat-list-item>\n    </mat-list>\n  </mat-sidenav>\n\n  <!--material cards list articles using angular ngFor loop:\n    -mat-card-header with div image from assets folder and data-binding of title and name of news source\n    -image with data-binding to article url image\n    -mat-card-content with data-binding of article description\n    -mat-card-actions with 4 buttons with mat-icons, 1 button with data-binding to a article url\n  -->\n  <mat-card class=\"example-card\" *ngFor=\"let article of mArticles\">\n    <mat-card-header>\n      <div\n        mat-card-avatar\n        [ngStyle]=\"{\n          'background-image':\n            'url(../assets/images/' + article.source.id + '.png)'\n        }\"\n        class=\"example-header-image\"\n      ></div>\n      <mat-card-title class=\"title\">{{ article.title }}</mat-card-title>\n      <mat-card-subtitle>{{ article.source.name }}</mat-card-subtitle>\n    </mat-card-header>\n\n    <img\n      mat-card-image\n      class=\"img-article\"\n      src=\"{{ article.urlToImage }}\"\n      alt=\"\"\n    />\n    <mat-card-content>\n      <p>\n        {{ article.description }}\n      </p>\n    </mat-card-content>\n    <mat-card-actions class=\"action-buttons\">\n      <button mat-button color=\"white\">\n        <mat-icon>thumb_up_alt</mat-icon> 12 Likes\n      </button>\n      <button mat-button color=\"white\">\n        <mat-icon>comment</mat-icon> Comments\n      </button>\n      <button mat-button color=\"white\"><mat-icon>share</mat-icon> Share</button>\n      <a mat-button color=\"white\" href=\"{{ article.url }}\" target=\"_blank\"\n        ><mat-icon>visibility</mat-icon> More</a\n      >\n    </mat-card-actions>\n  </mat-card>\n</mat-sidenav-container>\n","import { Component } from '@angular/core';\nimport { NewsApiService } from './news-api.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  // declare empty arrays for articles and news sources\n  mArticles: Array<any>;\n  mSources: Array<any>;\n\n  constructor(private newsapi: NewsApiService) {\n    console.log('app component constructor called');\n  }\n\n// tslint:disable-next-line: use-life-cycle-interface\n  ngOnInit() {\n    // load articles\n    this.newsapi.initArticles().subscribe(data => this.mArticles = data['articles']);\n    // load news sources\n    this.newsapi.initSources().subscribe(data => this.mSources = data['sources']);\n    }\n\n  // function to search for articles based on a news source (selected from UI mat-menu)\n  searchArticles(source) {\n    console.log('selected source is: ' + source);\n    this.newsapi.getArticlesByID(source).subscribe(data => this.mArticles = data['articles']);\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NewsApiService } from './news-api.service';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule\n  ],\n  providers: [NewsApiService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NewsApiService {\n  // Add your API key here\n  api_key = \"a41e5e07aa3a4d839a8ee6120f321328\";\n\n  constructor(private http: HttpClient) {}\n\n  // function to get list of all news sources\n  initSources() {\n    return this.http.get(\n      \"https://newsapi.org/v2/sources?language=en&apiKey=\" + this.api_key\n    );\n  }\n\n  // function to get a list of headlines\n  initArticles() {\n    return this.http.get(\n      \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=\" +\n        this.api_key\n    );\n  }\n\n  // function to get a list of headlines for a user-selected source\n  getArticlesByID(source: String) {\n    return this.http.get(\n      \"https://newsapi.org/v2/top-headlines?sources=\" +\n        source +\n        \"&apiKey=\" +\n        this.api_key\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}